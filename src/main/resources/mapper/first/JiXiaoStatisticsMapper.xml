<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.first.JiXiaoStatisticsMapper">
    <resultMap id="getDoctorUser" type="com.example.demo.bean.UserBean">
        <result property="userId" column="user_Id"/>
        <result property="userDeptName" column="user_dept_name"/>
        <result property="userName" column="user_name"/>

    </resultMap>
    <resultMap id="getPreliminaryReport" type="com.example.demo.bean.JiXiaoBean">
        <result property="reportDt" column="report_dt"/>
        <result property="examSource" column="exam_source"/>
        <result property="checkPeopleNumber" column="check_people_number"/>
        <result property="checkNumber" column="check_number"/>
        <result property="reportNumber" column="report_number"/>
        <result property="checkDoctorName" column="doctorName"/>
        <result property="checkDoctorNo" column="check_doctor_no"/>
        <result property="examineNumber" column="examineNumber"/>
        <result property="examClass" column="exam_class"/>
        <result property="deptName" column="dept_name"/>
        <result property="deptNo" column="dept_no"/>
    </resultMap>


    <select id="getDeptUsers" resultMap="getDoctorUser">
        select *
        from users
        where user_dept_name = #{deptName}
    </select>
    <select id="getPreliminaryReportUS" resultMap="getPreliminaryReport">

        SELECT COUNT(DISTINCT vse.SICK_ID) as check_people_number,
               COUNT(DISTINCT er.EXAM_ID)  AS report_Number,
               COUNT(DISTINCT er.EXAM_ID)  AS check_number,
               vse.EXAM_SOURCE             AS exam_source,
               er.REPORTER_NAME            AS doctorName,
               vse.exam_class
        FROM exam_report er
                 LEFT JOIN v_sub_exam vse ON er.exam_id = vse.sub_apply_id,
             v_sub_exam_item vsei
        WHERE er.REPORTER_ID = #{reportName}
          AND er.REPORT_DT BETWEEN #{startTime} AND #{endTime}
          AND er.EXAM_ID = vsei.apply_id
        GROUP BY er.REPORTER_NAME,
                 vse.EXAM_SOURCE
    </select>
    <select id="getVerifierReportUS" resultMap="getPreliminaryReport">
        SELECT er.VERIFIER_NAME           as doctorName,
               COUNT(DISTINCT er.EXAM_ID) as examineNumber,
               vse.EXAM_SOURCE            as exam_source
        FROM exam_report er
                 LEFT JOIN v_sub_exam vse ON er.exam_id = vse.sub_apply_id,
             v_sub_exam_item vsei
        WHERE er.EXAM_ID = vsei.apply_id
          AND er.VERIFI_DT BETWEEN #{startTime} AND #{endTime}
          AND er.VERIFIER_ID = #{reportName}
          and vse.exam_source = #{examSource}
        GROUP BY er.VERIFIER_NAME,
                 vse.EXAM_SOURCE
    </select>
    <select id="getCheckNumberFS" resultMap="getPreliminaryReport">
        SELECT e.exam_doctor    as doctorName,

               COUNT(e.EXAM_ID) as check_number,
               e.PAT_SOURCE     as exam_source

        FROM exams e
                 LEFT JOIN exam_items ei ON e.exam_id = ei.EXAM_ID
        WHERE e.exam_doctor IS NOT NULL
          AND ei.ITEM_NAME IS NOT NULL
          and e.exam_doctor = #{reportName}

          and TO_DAYS(e.EXAM_DT) = TO_DAYS(#{time})
        GROUP BY ei.ITEM_NAME,
                 e.PAT_SOURCE
    </select>
    <select id="getPreliminaryReportFSByItemNameAndSource" resultMap="getPreliminaryReport">
        SELECT er.REPORTER_NAME as doctorName,
               COUNT(er.RPT_ID) as reportNumber,
               e.pat_source     as exam_source
        FROM exams e
                 LEFT JOIN exam_items ei ON e.EXAM_ID = ei.EXAM_ID
                 LEFT JOIN exam_report er ON e.exam_id = er.EXAM_ID
        WHERE e.EXAM_CLASS != 'US'
	AND ei.ITEM_NAME IS NOT NULL
	AND er.REPORTER_NAME = #{reportName}
          and TO_DAYS(er.VERIFI_DT) = TO_DAYS(#{time})
          and e.pat_source = #{examSource}
        GROUP BY
            er.REPORTER_NAME,
            e.pat_source
    </select>
    <select id="getPreliminaryReportFS" resultMap="getPreliminaryReport">
        SELECT er.REPORTER_NAME as doctorName,
               COUNT(er.RPT_ID) as report_Number,
               e.pat_source     as exam_source,
               e.exam_class     as exam_class
        FROM exams e
                 LEFT JOIN exam_items ei ON e.EXAM_ID = ei.EXAM_ID
                 LEFT JOIN exam_report er ON e.exam_id = er.EXAM_ID
        WHERE e.EXAM_CLASS != 'US'
	AND ei.ITEM_NAME IS NOT NULL
	AND er.REPORTER_ID = #{reportName}
          and er.REPORT_DT BETWEEN #{startTime}
          AND #{endTime}
        GROUP BY
            e.pat_source,
            e.EXAM_CLASS
    </select>
    <select id="getVerifierReportFS" resultMap="getPreliminaryReport">
        SELECT er.VERIFIER_NAME as doctorName,
               COUNT(er.RPT_ID) as examineNumber,
               e.pat_source     as exam_source
        FROM exams e
                 LEFT JOIN exam_items ei ON e.EXAM_ID = ei.EXAM_ID
                 LEFT JOIN exam_report er ON e.exam_id = er.EXAM_ID
        WHERE e.EXAM_CLASS != 'US'
	AND ei.ITEM_NAME IS NOT NULL
	AND er.VERIFIER_NAME = #{reportName}
          and e.pat_source = #{examSource}
          and TO_DAYS(er.VERIFI_DT) = TO_DAYS(#{time})
        GROUP BY
            e.pat_source,
            e.EXAM_CLASS
    </select>
    <select id="selectJiXiaoStatisticsOne" parameterType="com.example.demo.bean.JiXiaoBean"
            resultMap="getPreliminaryReport">
        select report_dt,dept_name,exam_source,dept_no,
        check_doctor_name as doctorName,
        check_doctor_no,
        exam_class,
        examine_number as examineNumber
        from jixiao_statistics
        <where>
            check_doctor_no = #{checkDoctorNo}
            and report_dt = #{reportDt}
            and exam_source = #{examSource}
            <if test="examClass!=null and examClass !=''">and exam_class=#{examClass}</if>

        </where>
    </select>
    <select id="getJustVerifierReportFS" resultMap="getPreliminaryReport">
        SELECT er.VERIFIER_NAME as doctorName,
               COUNT(er.RPT_ID) as examineNumber,
               e.pat_source     as exam_source,
               e.exam_class
        FROM exams e
                 LEFT JOIN exam_report er ON e.exam_id = er.EXAM_ID
        WHERE er.VERIFIER_id = #{reportName}
          and er.VERIFI_DT BETWEEN #{startTime}
            and #{endTime}
        GROUP BY e.pat_source,
                 e.EXAM_CLASS
    </select>
    <update id="updateJiXiaoStaticsByOne" parameterType="com.example.demo.bean.JiXiaoBean">
        update jixiao_statistics
        <set>
            <if test="checkNumber!=null and checkNumber!=0">
                check_number=#{checkNumber},
            </if>
            <if test="reportNumber!=null and reportNumber!=0">
                report_number=#{reportNumber},
            </if>
            <if test="examineNumber!=null and examineNumber!=0">
                examine_number=#{examineNumber},
            </if>

        </set>
        where check_doctor_no = #{checkDoctorNo}
        and dept_Name = #{deptName}
        and report_dt = #{reportDt}
        and exam_source = #{examSource}
        <if test="examClass!=null and examClass!=''">and exam_class =#{examClass}</if>

    </update>
    <insert id="inertJiXiaoStatisticsList">
        insert into jixiao_statistics (`report_dt`,
        `dept_name`
        ,`check_doctor_name`
        , `item_name`
        , `check_number`
        , `report_number`
        , `examine_number`
        , `exam_source`
        )
        value
        <foreach collection="list" item="item" index="index" separator=",">

            (#{item.reportDt},#{item.deptName},#{item.checkDoctorName},#{item.itemName},#{item.checkNumber},#{item.reportNumber},#{item.examineNumber},#{item.examSource})
        </foreach>

    </insert>
    <insert id="inertJiXiaoStatistics">
        insert into jixiao_statistics (`report_dt`, `exam_source`,
                                       `dept_no`,
                                       `dept_name`,
                                       `check_doctor_name`,
                                       `check_doctor_no`,
                                       `exam_class`,
                                       `check_people_number`,
                                       `check_number`,
                                       `report_number`,
                                       `examine_number`)
            value
            (#{reportDt},#{examSource},#{deptNo},#{deptName},#{checkDoctorName},#{checkDoctorNo},#{examClass},#{checkPeopleNumber},#{checkNumber},#{reportNumber},#{examineNumber})

    </insert>
    <select id="selectJSStatistics" resultMap="getPreliminaryReport">
        SELECT COUNT(DISTINCT v.SICK_ID)      AS check_people_number,
               COUNT(DISTINCT v.sub_apply_id) AS check_number,
               v.EXAM_SOURCE                  as exam_source,
               v.EXAM_CLASS                   as exam_class
        FROM exams e,
             v_sub_exam v
        WHERE e.EXAM_DT BETWEEN #{startTime} AND #{endTime}
          AND e.APPLY_ID = v.APPLY_ID
          AND e.EXAM_CLASS = #{examClass}
          AND E.EXAM_STATUS >= '60'
        GROUP BY v.EXAM_SOURCE
    </select>
</mapper>
